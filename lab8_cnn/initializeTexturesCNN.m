function net = initializeTexturesCNN()
%Red Neuronal Entrenada
f=1/100 ;
net.layers = {} ;
% Imput capa 1: imgen de 128x128
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(5,5,1,20, 'single'), ...
                           'biases', zeros(1, 20, 'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
% Imput capa 2: 124x124x20
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
% Imput capa 3: 62x62x20
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(5,5,20,50, 'single'),...
                           'biases', zeros(1,50,'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
% Imput capa 4: 58x58x50
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
% Imput capa 5: 29x29x50                       
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(4,4,50,100, 'single'),...
                           'biases', zeros(1,100,'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
% Imput capa 6: 26x26x200  
net.layers{end+1} = struct('type', 'relu') ;
% Imput capa 7: 26x26x100  
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(5,5,100,200, 'single'),...
                           'biases', zeros(1,200,'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
% Imput capa 8: 22x22x200  
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
% Imput capa 9: 11x11x200 
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(4,4,200,300, 'single'),...
                           'biases', zeros(1,300,'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
% Imput capa 10: 8x8x300 
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
% Imput capa 11: 4x4x300 
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(3,3,300,400, 'single'),...
                           'biases', zeros(1,400,'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
% Imput capa 12: 2x2x400 
net.layers{end+1} = struct('type', 'relu') ;
% Imput capa 13: 2x2x400 
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(2,2,400,25, 'single'),...
                           'biases', zeros(1,25,'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
% Imput capa 14: 1x1x25 
net.layers{end+1} = struct('type', 'softmaxloss') ;
